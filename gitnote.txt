git note
2019/11/11

git add/stage <file>		# 添加文件到stage暂存区
git commit <file>		# 提交stage暂存区文件到branch master仓库或者叫版本库
git commit -m "discribe the changes"	# 提交文件，并描述变更。

git status			# 查看仓库当前状态
git log				# 查看提交日志
git log --pretty=oneline	# 一行一条的方式显示提交的日志
git reflog			# 查看历史操作记录，主要是查看commit id

git reset --hard <commit id>	# 恢复到指定commit id的版本，id写前7位即可
git reset --hard HEAD		# unstage, 回退到上一个版本
git reset HEAD^			# 恢复到上一个版本
git reset HEAD^^		# 恢复到上上一个版本

git diff <file>			# 工作区文件与暂存区文件对比
git diff HEAD <file>		# 工作区文件与仓库文件对比
git diff --cached <file>	# 暂存区文件与仓库文件对比

git restore --staged <file>	# unstage, 撤销上一次add/stage操作,版本回退
git restore <file>		# 放弃工作区的修改，或者说将工作区的文件恢复为暂存区的版本

git remote add origin git@github.com:wuchanghui5220/learngit.git # 在自己的GitHub创建远程仓库learngit，与本地仓库关联。
git push -u origin master	# 把本地库的内容推送到远程库，并关联。
git push origin master		# 此后，要推送本地库，就使用此命令。

# 在其它设备创建和关联远程库
git config --global user.email wuchanghui5220@gmail.com
git config -l

# 克隆
git clone git@github.com:wuchanghui5220/gitskills.git


git branch dev			# 创建分支dev

git checkout -b dev		# -b 参数表示创建并切换
git checkout dev		# 切换到dev分支

git switch -c dev		# -c 参数表示创建并切换
git switch dev			# 切换到dev分支


git branch			# 查看当前分支

git checkout master		# 切换到主分支
git merge dev			# 把dev分支合并到主分支
git branch -d dev		# 删除dev分支


git log --graph --pretty=oneline --abbrev-commit # 查看分支的合并情况
# 合并分支，产生冲突，在master分支修改后合并，只是主分支保持最新。分支的内容还是之前版本，并没有被修改

git merge --no-ff		# --no-ff 表示禁用Fast forward，采用普通合并，每一次合并的记录都会保存

git stash			# 存储工作区
git stash apply 		# 恢复到工作区
git stash drop			# 删除stash

git stash pop			# 恢复到工作区并删除stash

git cherry-pick <commit id>	# 把修复bug的操作在分支上自动修复

# 把工作区储藏起来后，工作区就是干净的。此时可以创建临时分支来处理bug或者其它修改，也可以直接修改主分支，
# 1、如果直接修改master分支的内容或者bug，修改好之后。恢复到工作区写代码，删除stash，此时无法cherry-pick，需要 "git add" and/or "git commit -a" ，然后cherry-pick

#2、到主分区创建新的临时分支来修复bug，修改好后，add 和 commit ，回到主分区，开始合并
#  git merge --no-ff -m "merged bug fix 01 well done" fix-bug-01
# 在分支cherry-pick commit id，即可自动修复bug，在此之前必须add 和commit，否则报错。

# 3 新增文件stash操作步骤，add 文件到暂存区就可以 stash了。到主分区创建临时分支修复bug，修改好后，add 和 commint，记住commit id，回到主分支，合并
# git merge --no-ff -m "merge bug fix 02 add See you" fix-bug-02
# 在cherry-pick之前也是要add 和 commit 新文件

# Feature 分支，分支上开发新功能，add和commint之后，突然又不要合并，而且还要销毁
# 使用 git branch -d feature01 是不成功的，没有合并的文件要删除必须使用 -D参数

git remote -v			# 查看远程库信息
# 本地新建的分支如果不推送到远程，对其他人就是不可见的；
# 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
# 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
#建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
#从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
git push origin dev		# 把本地分支dev推送到远程库

# 多人协作
# 合作伙伴或者其它开发者与你同时开发dev分支
git checkou -b dev origin/dev	#创建远程分支，然后修改文件并add和commit，最后push到 远程库 git push origin dev
# 此时你也修改好了同一个文件add并commit，但是push报错，
# 现在，你可以pull，但又失败了，你的dev和origin/dev没有关联
git branch --set-upstream-to=origin/dev dev
#再pull，然后提交，如果在相同的行修改了内容，合并有冲突，需要手动解决。
# 最好是每次都pull到本地，再修改或者添加内容
